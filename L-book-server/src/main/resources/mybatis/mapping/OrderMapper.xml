<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.liantao.lbook.mapper.OrderMapper">

    <resultMap id="OrderResultMap" type="cn.liantao.lbook.entity.Order">
        <result column="id" jdbcType="INTEGER" property="id" />
        <result column="account" jdbcType="VARCHAR" property="account" />
        <result column="ISBN" jdbcType="VARCHAR" property="ISBN" />
        <result column="count" jdbcType="SMALLINT" property="count" />
        <result column="date" jdbcType="TIMESTAMP" property="date" />
    </resultMap>

    <resultMap id="dateOrderResultMap" type="cn.liantao.lbook.entity.DateOrder">
        <result column="id" jdbcType="INTEGER" property="id" />
        <result column="account" jdbcType="VARCHAR" property="account" />
        <result column="date" jdbcType="TIMESTAMP" property="date" />
        <result column="count" jdbcType="SMALLINT" property="count" />
        <result column="bookName" jdbcType="VARCHAR" property="bookName" />
        <result column="amount" jdbcType="FLOAT" property="amount"/>
    </resultMap>

    <sql id="getOrders">
        SELECT *
        FROM orders
            NATURAL JOIN (
                SELECT  name AS bookname,
                        author,ISBN,
                        price,
                        cover
                FROM books ) AS bookss
            NATURAL JOIN (
                SELECT  name AS username,
                        account
                FROM users ) AS users
    </sql>

    <sql id="dateFilter">
        SELECT *
        FROM orders
        NATURAL JOIN (
        SELECT name AS bookname,author,ISBN,price,cover
        FROM books
        ) AS bookss
        NATURAL JOIN (
        SELECT name AS username,account
        FROM users
        ) AS users
    </sql>

    <!--获取所有订单-->
    <select id="getAllOrders" resultMap="OrderResultMap">
        <include refid="getOrders"></include>
        ORDER BY id desc
    </select>

    <!--订单搜索-->
    <select id="searchOrder" resultMap="OrderResultMap">
        <include refid="getOrders"></include>
            WHERE username like #{filter}
            ORDER BY id
    </select>

    <!--获取指定用户订单-->
    <select id="getOrder" resultMap="OrderResultMap">
        <include refid="getOrders"></include>
        WHERE account = #{account}
        ORDER BY id desc
    </select>

    <!--最大订单id-->
    <select id="maxID" resultType="int">
        SELECT max(id)
            FROM orders
    </select>

    <!--获取指定书籍库存-->
    <select id="selectStock" resultType="int">
        SELECT stock
            FROM books
            WHERE isbn=#{ISBN}
    </select>

    <!--更新库存-->
    <update id="setStock">
        UPDATE books
            SET stock=#{stock} WHERE isbn=#{ISBN}
    </update>

    <!--添加订单-->
    <insert id="addOrder" parameterType="cn.liantao.lbook.entity.Order">
        INSERT INTO orders(id, account, isbn, count, date)
            values(#{id}, #{account}, #{ISBN}, #{count}, #{date})
    </insert>

    <!--时间筛选订单-->
    <select id="dateFilter" resultMap="dateOrderResultMap">
        SELECT date, sum(count) as count, sum(amount) as amount
            FROM (
                    SELECT DATE_FORMAT(date, "%Y-%m-%d") as date, count, count*price as amount
                        FROM orders NATURAL JOIN books
                        WHERE date >= #{beginDate} and date &lt;= #{endDate}
                        <if test="account != 'manager'">and account = #{account}</if>
                    ) AS dateOrder
            GROUP BY date
    </select>

    <select id="dateDetailFilter" resultMap="dateOrderResultMap">
        SELECT  id, account, DATE_FORMAT(date, "%Y-%m-%d") as date, count, books.name as bookname, count*price as amount
            FROM orders NATURAL JOIN books
            WHERE date >= #{beginDate} and date &lt;= #{endDate}
        <if test="account != 'manager'">and account = #{account}</if>
            ORDER BY account, date
    </select>
</mapper>